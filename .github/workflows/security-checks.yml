name: Security Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Check Branch Protection
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "Direct pushes to main branch are not allowed"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit

      - name: Check for secrets
        run: |
          npm install -g secret-scanner
          secret-scanner .

      - name: Check file permissions
        run: |
          find . -type f -exec stat -c "%a %n" {} \; | grep -e "^...w...w."
          if [[ $? == 0 ]]; then
            echo "Found world-writable files"
            exit 1
          fi